<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-11 at 18:42:49.
 */
class CRM_Chainsms_Translator_EmailAddressTranslatorTest extends PHPUnit_Framework_TestCase {
  const TEST_CONTACT_SURNAME = 'Unit Test';
  /**
    * @var CRM_Chainsms_Translator_EmailAddressTranslator
   */
  protected $object;
  var $testEntities = array();

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new CRM_Chainsms_Translator_EmailAddressTranslator;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    TestUtils::deleteTestEntities($this->testEntities);
    TestUtils::deleteTestContacts(self::TEST_CONTACT_SURNAME);
    parent::tearDown();
  }

  /**
   * @covers CRM_Chainsms_Translator_EmailAddressTranslator::getName
   * @todo   Implement testGetName().
   */
  public function testGetName() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

    /**
     * @covers CRM_Chainsms_Translator_EmailAddressTranslator::getDescription
     * @todo   Implement testGetDescription().
     */
  public function testGetDescription() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CRM_Chainsms_Translator_EmailAddressTranslator::process
   * @todo   Implement testProcess().
   */
  public function testProcess() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CRM_Chainsms_Translator_EmailAddressTranslator::update
   * @todo   Implement testUpdate().
   */
  public function testUpdate() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CRM_Chainsms_Translator_EmailAddressTranslator::translate
   * @todo   Implement testTranslate().
   */
  public function testTranslate() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  public function testOneEmailAddress() {
    $createdEntitiesToDelete = CRM_Chainsms_Translator_TestUtils::createContactWithMailing(
      'Email Address Translator',
      'Unit Test',
      'emailresponse@unittest.com'
    );

    $this->testEntities[] = array('Group', $createdEntitiesToDelete['group_id']);

    $this->translateEmailAddresses($createdEntitiesToDelete['group_id']);

    $this->assertContactHasEmail($createdEntitiesToDelete['contact_id'], 'emailresponse@unittest.com');
  }

  /*
  public function testDuplicateEmailAddress() {
    $createdEntitiesToDelete = CRM_Chainsms_Translator_TestUtils::createContactWithMailing(
      'Email Address Translator',
      'Unit Test 2',
      'emailresponse@unittest.com'
    );

    // add the Email Address
    $createEmailApiParams = array(
      'version' => 3,
      'sequential' => 1,
      'contact_id' => $createdEntitiesToDelete['contact_id'],
      'email' => 'emailresponse@unittest.com',
      'on_hold' => 0
    );
    $createEmailApiResults = civicrm_api('Email', 'create', $createEmailApiParams);
    
    echo print_r($createEmailApiResults, TRUE);
    
    //$this->testEntities[] = array('Contact', $createdEntitiesToDelete['contact_id']);
    $this->testEntities[] = array('Group', $createdEntitiesToDelete['group_id']);

    $this->translateEmailAddresses($createdEntitiesToDelete['group_id']);
    
    $this->assertContactHasEmail($createdEntitiesToDelete['contact_id'], 'emailresponse@unittest.com', 2);
  }

  public function testWithOnHoldDuplicateEmailAddress() {
    $createdEntitiesToDelete = CRM_Chainsms_Translator_TestUtils::createContactWithMailing(
      'Email Address Translator',
      'Unit Test',
      'emailresponse@unittest.com'
    );

    // add the Email Address
    $createEmailApiParams = array(
      'version' => 3,
      'sequential' => 1,
      'contact_id' => $createdEntitiesToDelete['contact_id'],
      'on_hold' => 1,
      'email' => 'emailresponse@unittest.com',
    );
    $createEmailApiResults = civicrm_api('Email', 'create', $createEmailApiParams);
    
    //$this->testEntities[] = array('Contact', $createdEntitiesToDelete['contact_id']);
    $this->testEntities[] = array('Group', $createdEntitiesToDelete['group_id']);

    $this->translateEmailAddresses($createdEntitiesToDelete['group_id']);
    $this->assertContactHasEmail($createdEntitiesToDelete['contact_id'], 'emailresponse@unittest.com', 2);
  }
  */
  
  public function testEmailAddressAndWhitespace() {
    $createdEntitiesToDelete = CRM_Chainsms_Translator_TestUtils::createContactWithMailing(
        'Email Address Translator',
        'Unit Test',
        ' emailresponse@unittest.com'
    );

    //$this->testEntities[] = array('Contact', $createdEntitiesToDelete['contact_id']);
    $this->testEntities[] = array('Group', $createdEntitiesToDelete['group_id']);

    $this->translateEmailAddresses($createdEntitiesToDelete['group_id']);
    
    $this->assertContactHasEmail($createdEntitiesToDelete['contact_id'], 'emailresponse@unittest.com');
  }

  public function testResponseContainsEmail() {
    $createdEntitiesToDelete = CRM_Chainsms_Translator_TestUtils::createContactWithMailing(
        'Email Address Translator',
        'Unit Test',
        'response contains emailresponse@unittest.com x x'
    );

    //$this->testEntities[] = array('Contact', $createdEntitiesToDelete['contact_id']);
    $this->testEntities[] = array('Group', $createdEntitiesToDelete['group_id']);

    $this->translateEmailAddresses($createdEntitiesToDelete['group_id']);

    $this->assertContactHasEmail($createdEntitiesToDelete['contact_id'], 'emailresponse@unittest.com');
  }

  public function testResponseContainsEmailAndFullStop() {
    $createdEntitiesToDelete = CRM_Chainsms_Translator_TestUtils::createContactWithMailing(
        'Email Address Translator',
        'Unit Test',
        'Sure it\'s emailresponse@unittest.com.'
    );

    //$this->testEntities[] = array('Contact', $createdEntitiesToDelete['contact_id']);
    $this->testEntities[] = array('Group', $createdEntitiesToDelete['group_id']);
    $this->translateEmailAddresses($createdEntitiesToDelete['group_id']);
    $this->assertContactHasEmail($createdEntitiesToDelete['contact_id'], 'emailresponse@unittest.com');
  }
  
  public function testResponseContainsEmailAndExclamation() {
    $createdEntitiesToDelete = CRM_Chainsms_Translator_TestUtils::createContactWithMailing(
        'Email Address Translator',
        'Unit Test',
        'Sure it\'s emailresponse@unittest.com!'
    );

    //$this->testEntities[] = array('Contact', $createdEntitiesToDelete['contact_id']);
    $this->testEntities[] = array('Group', $createdEntitiesToDelete['group_id']);
    $this->translateEmailAddresses($createdEntitiesToDelete['group_id']);
    $this->assertContactHasEmail($createdEntitiesToDelete['contact_id'], 'emailresponse@unittest.com');
  }

  public function testResponseContainsMultipleEmailAddresses() {
    $createdEntitiesToDelete = CRM_Chainsms_Translator_TestUtils::createContactWithMailing(
        'Email Address Translator',
        'Unit Test',
        'Sure it\'s emailresponse@unittest.com/emailresponse2@unittest.com!'
    );

    //$this->testEntities[] = array('Contact', $createdEntitiesToDelete['contact_id']);
    $this->testEntities[] = array('Group', $createdEntitiesToDelete['group_id']);
    $this->translateEmailAddresses($createdEntitiesToDelete['group_id']);
    $this->assertContactHasEmail($createdEntitiesToDelete['contact_id'], 'emailresponse@unittest.com');
    $this->assertContactHasEmail($createdEntitiesToDelete['contact_id'], 'emailresponse2@unittest.com');
  }
  
  public function assertContactHasEmail($contactId, $emailAddress, $expectedCount=1){
    $getEmailAddressCountParams = array(
      'version' => 3,
      'sequential' => 1,
   		'on_hold' => '0',
	  	'contact_id' => $contactId,
		  'email' => $emailAddress,
    );

    $getEmailAddressCountResults = civicrm_api('Email', 'getcount', $getEmailAddressCountParams);

    $this->assertEquals($expectedCount, $getEmailAddressCountResults, print_r($getEmailAddressCountResults, TRUE));
  }

  public function translateEmailAddresses($groupId){
    $translator = new CRM_Chainsms_Translator;
    $translator->setGroups(array($groupId));
    $translator->setStartDate('2015-08-12');
    $translator->setEndDate('2015-08-14');
    $translator->prepare();
    $translator->setTranslatorClass('CRM_Chainsms_Translator_EmailAddressTranslator');
    $translator->setCampaign('Unit Test Email Address Campaign');
    $translator->translate();
    $translator->update();
  }
}
